#LeetCode 3Sum 15

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Solution:
Brute force:
The brute force approach to this problem will be O(n^3) with space of O(n) involving the HashSet.
Approach:
  ->i,j,k to add 3 sums and check for 0 nums[i]+nums[j]+nums[k]=0
  ->To avoid taking duplicates eg [-1,1,0] & [0,-1,1] is the same.Sort the array and add in list
This method will give TLE

Optimal Approach:  (sorting)O(n logn)+ O(n^2) -> O(n^2) 
  ->Sort the arrray
  ->low -> 0 and high->length => sum=nums[i]+nums[low]+nums[high]
  ->if sum<0 then move low++ else move high++
  ->sum==0  then you add result and low &high change
  ->edge cases to be covered if low & low+1 is same then increase same for high and similarly for i

List<List<Integer>> result=new ArrayList<>();
        if(nums.length==0 || nums==null)return result;
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
            if(nums[i]>0)break;
            if(i>0 && nums[i]==nums[i-1])continue;
            int low=i+1;
            int high=nums.length-1;
            while(low<high){
                int sum=nums[i]+nums[low]+nums[high];
                if(sum==0){
                    result.add(Arrays.asList(nums[i],nums[low],nums[high]));

                    low++;
                    high--;
                    while(low<high && nums[low]==nums[low-1])low++;
                    while(low<high && nums[high]==nums[high+1])high--;
                }else if(sum<0){
                    low++;
                }else{
                    high--;
                }
            }
        }
        return result;
