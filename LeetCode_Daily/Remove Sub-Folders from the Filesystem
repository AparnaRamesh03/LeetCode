#SUmno 1233

Input: folder = ["/a","/a/b","/c/d","/c/d/e","/c/f"]
Output: ["/a","/c/d","/c/f"]


Brute force approach :
  ->I added a queue everytime and checked with the next array.
  ->TLE

Optimal :
  ->i take the first array add it to the list
  ->get the last added folder path by doing this => ans.get(ans.size() - 1) + "/";
  ->check if the array has this value ans.get(ans.size() - 1) + "/";
  ->if it does not have then add to list the value.
/a/b  & /a/b/d   then list.size() will be /a/b which is 1 and then check if that value is startsWith the folder value.
startswith is there in arraylist so it helps.


#JAVA CODE:
class Solution {
    public List<String> removeSubfolders(String[] folder) {
        // Sort the folders lexicographically so parent folders come before their subfolders
        Arrays.sort(folder);
        
        // Initialize result list with the first folder
        List<String> ans = new ArrayList<>();
        ans.add(folder[0]);
        
        
        // Iterate through remaining folders starting from index 1
        for (int i = 1; i < folder.length; i++) {
            // Get the last added folder path and add a trailing slash
            String lastFolder = ans.get(ans.size() - 1) + "/";
           
            System.out.print(ans.size()-1);
            // Check if current folder starts with lastFolder
            // If it doesn't start with lastFolder, then it's not a subfolder
            if (!folder[i].startsWith(lastFolder)) {
                ans.add(folder[i]);
            }
        }
        
        return ans;
    }
}
           
