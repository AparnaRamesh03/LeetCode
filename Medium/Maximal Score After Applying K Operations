#Leetcode 2530
# https://leetcode.com/problems/maximal-score-after-applying-k-operations/description/

Brute Force: O(k*nlogn) and space is O(n)  Gives TLE
  -> loop and sort each time the maximum value should be taken
  -> Math.ceil((int) nums[len] / 3.0) orMath.ceil((double) nums[len] / 3) ; should be done this way or else 3.33 will be taken as 3 instead of 4

Optimal soln: Priority Queue
  ->PriorityQueue will arrage as and when the val is added 
  ->go through through loop  and add the reduced Math.ceil to the queue as it is priority quue it will automatically order.
#JAVA CODE
 public long maxKelements(int[] nums, int k) {
        PriorityQueue<Integer>pq=new PriorityQueue<>(Comparator.reverseOrder());
        for(int num:nums){
            pq.add(num);
        }
        int score=0;
        while(k>0){
            int val=pq.poll();
            score+=val;
            pq.add((int)Math.ceil(val/3.0));
            k--;
        }
        return score;
    }
