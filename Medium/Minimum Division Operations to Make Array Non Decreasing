#Leetcode 3326
#https://leetcode.com/problems/minimum-division-operations-to-make-array-non-decreasing/description/

Brute force: O(n * sqrt(M) where M is max val in the array nums
  ->have a seperate function that checks or the GCD. you check from 2 and stop when it is half than x
      eg:if x is 36 then you stop at 6 it cant go more than that
  ->you check from right to left for the non descending and you keep checking if the [i]>[i+1] and if not return -1

int lowestPrimeFactor(int x){
        for(int i=2;i*i<=x;i++){
            if(x%i==0) return i;
        }
        return x;
    }
    public int minOperations(int[] nums) {
        int n=nums.length,min_operations=0;
        for(int i=n-2;i>=0;i--){
            if(nums[i]>nums[i+1]){
                min_operations++;
                nums[i]=lowestPrimeFactor(nums[i]);
            }
            if(nums[i]>nums[i+1]){
                return -1;
            }
        }
        return min_operations;
    }
